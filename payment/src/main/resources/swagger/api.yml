openapi: '3.0.3'

info:
  title: 'payment'
  version: 0.0.1

servers:
  - url: http://localhost:10004
    description: Development server

paths:
  /api/payments:
    post:
      description: Checkout
      operationId: checkout
      tags:
        - Payment
      requestBody:
        content:
          application/vnd.vroong.private.v1+json:
            schema:
              $ref: '#/components/schemas/Payment'
      responses:
        '201':
          $ref: '#/components/responses/Created'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/payments/{paymentId}:
    get:
      description: Get Payment
      operationId: getPayment
      tags:
        - Payment
      parameters:
        - $ref: '#/components/parameters/PaymentIdParam'
      responses:
        '200':
          description: Ok
          content:
            application/vnd.vroong.private.v1+json:
              schema:
                $ref: '#/components/schemas/Payment'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

components:
  schemas:

    #----------------------------------------
    # API fields
    #----------------------------------------
    LongId:
      type: integer
      format: int64
      example: 1

    DateTime:
      type: string
      format: date-time
      example: "2018-12-01T10:00:00Z"

    StringField:
      type: string
      example: "foo"

    UUID:
      type: string
      format: uuid
      example: c9106593-2d6c-40eb-8504-66b0ef41ad2d

    #----------------------------------------
    # Common Model
    #----------------------------------------

    LongArray:
      type: object
      properties:
        ids:
          type: array
          items:
            $ref: '#/components/schemas/LongId'

    ProblemDetails:
      type: object
      properties:
        type:
          type: string
          format: uri
          example: template/constraint-violation
        title:
          type: string
          example: 제출한 요청이 유효하지 않습니다
        detail:
          type: string
        fieldErrors:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/FieldError'

    FieldError:
      type: object
      properties:
        field:
          type: string
        message:
          $ref: '#/components/schemas/ErrorCode'

    ErrorCode:
      type: string
      example:
        - NotNull
        - Size

    Page:
      type: object
      properties:
        size:
          type: integer
          format: int32
          default: 20
          example: 20
        totalElements:
          type: integer
          format: int64
          example: 100
        totalPages:
          type: integer
          format: int32
          example: 5
        number:
          type: integer
          format: int32
          default: 1
          example: 1

    #----------------------------------------
    # API Model
    #----------------------------------------
    Payment:
      type: object
      required:
        - cardNumber
        - amount
        - orderId
      properties:
        paymentId:
          $ref: '#/components/schemas/LongId'
        cardNumber:
          $ref: '#/components/schemas/StringField'
        approvalNumber:
          $ref: '#/components/schemas/StringField'
        amount:
          $ref: '#/components/schemas/Money'
        status:
          $ref: '#/components/schemas/PaymentStatus'
        orderId:
          $ref: '#/components/schemas/LongId'

    PaymentStatus:
      type: string
      enum:
        - WAITING
        - APPROVED
        - REJECTED
        - CANCELED

    Money:
      type: number
      example: 1000

  parameters:

    PageParam:
      in: query
      name: page
      schema:
        type: integer
        format: int32
        default: 1

    SizeParam:
      in: query
      name: size
      schema:
        type: integer
        format: int32
        default: 10

    PaymentIdParam:
      in: path
      name: paymentId
      required: true
      schema:
        $ref: '#/components/schemas/LongId'

  responses:

    Created:
      description: Created

    Accepted:
      description: Accepted

    NoContent:
      description: No Content

    EmptyContent:
      description: No Content
      content:
        application/vnd.vroong.private.v1+json: { }

    BadRequest:
      description: Bad Request
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'

    Unauthorized:
      description: Unauthorized
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'

    Forbidden:
      description: Forbidden
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'

    NotFound:
      description: Not Found
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'

    Conflict:
      description: Conflict
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'

    ServerError:
      description: Internal Server Error
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'

  securitySchemes:
    'jhipster-uaa':
      type: oauth2
      flows:
        password:
          tokenUrl: http://localhost:9999/uaa/oauth/token
          refreshUrl: http://localhost:9999/uaa/oauth/token
          scopes: { }
        clientCredentials:
          tokenUrl: http://localhost:9999/uaa/oauth/token
          scopes: { }

security:
  - jhipster-uaa: [ ]
