openapi: '3.0.3'

info:
  title: 'delivery'
  version: 0.0.1

servers:
  - url: http://localhost:10003
    description: Delivery API

paths: 
  /api/deliveries:
    post:
      description: 배송 생성
      operationId: createDelivery
      tags:
        - Delivery
      requestBody:
        content:
          application/vnd.vroong.private.v1+json:
            schema:
              $ref: '#/components/schemas/Delivery'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Delivery'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/deliveries/{deliveryId}:
    get:
      description: 배송 정보 조회
      operationId: getDelivery
      tags:
        - Delivery
      parameters:
        - in: path
          name: deliveryId
          schema:
            type: integer
          required: true
          description: delivery id
      responses:
        '200':
          description: Delivery Info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Delivery'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'

    patch:
      description: 배송 주소 업데이트
      operationId: updateDelivery
      tags:
        - Delivery
      parameters:
        - in: path
          name: deliveryId
          schema:
            type: integer
          required: true
          description: delivery id
      requestBody:
        content:
          application/vnd.vroong.private.v1+json:
            schema:
              $ref: '#/components/schemas/Delivery'
      responses:
        '200':
          $ref: '#/components/responses/Accepted'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/deliveries/{deliveryId}/cancel:
    post:
      description: 배송 취소
      operationId: cancelDelivery
      tags:
        - Delivery
      parameters:
        - in: path
          name: deliveryId
          schema:
            type: integer
          required: true
          description: delivery id
      responses:
        '200':
          $ref: '#/components/responses/Accepted'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'

components:
  schemas:
    Delivery:
      type: object
      properties:
        deliveryId:
          $ref: '#/components/schemas/LongId'
        orderId:
          $ref: '#/components/schemas/LongId'
        traceNumber:
          $ref: '#/components/schemas/UUID'
        sender:
          $ref: '#/components/schemas/Sender'
        receiver:
          $ref: '#/components/schemas/Receiver'
        currentLocation:
          $ref: '#/components/schemas/Coordinate'
        state:
          $ref: '#/components/schemas/DeliveryState'

    #----------------------------------------
    # API fields
    #----------------------------------------
    LongId:
      type: integer
      format: int64
      example: 1

    Sender:
      type: object
      properties:
        name:
          type: string
        phone:
          type: string
        address:
          type: string
        coordinate:
          $ref: '#/components/schemas/Coordinate'
    Receiver:
      type: object
      properties:
        name:
          type: string
        phone:
          type: string
        address:
          type: string
        coordinate:
          $ref: '#/components/schemas/Coordinate'
    Coordinate:
      type: object
      properties:
        x:
          type: string
        y:
          type: string
        z:
          type: string
    DeliveryState:
      enum:
        - PREPARING
        - DELIVERING
        - COMPLETED
        - CANCELED

    DateTime:
      type: string
      format: date-time
      example: "2018-12-01T10:00:00Z"

    String:
      type: string
      example: "foo"

    UUID:
      type: string
      format: uuid
      example: c9106593-2d6c-40eb-8504-66b0ef41ad2d

    #----------------------------------------
    # Common Model
    #----------------------------------------

    ProblemDetails:
      type: object
      properties:
        type:
          type: string
          format: uri
          example: template/constraint-violation
        title:
          type: string
          example: 제출한 요청이 유효하지 않습니다
        detail:
          type: string
        fieldErrors:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/FieldError'

    FieldError:
      type: object
      properties:
        field:
          type: string
        message:
          $ref: '#/components/schemas/ErrorCode'

    ErrorCode:
      type: string
      example:
        - NotNull
        - Size

    Page:
      type: object
      properties:
        size:
          type: integer
          format: int32
          default: 20
          example: 20
        totalElements:
          type: integer
          format: int64
          example: 100
        totalPages:
          type: integer
          format: int32
          example: 5
        number:
          type: integer
          format: int32
          default: 1
          example: 1

    #----------------------------------------
    # API Model
    #----------------------------------------

    Example:
      type: object
      properties:
        exampleId:
          $ref: '#/components/schemas/LongId'
        title:
          $ref: '#/components/schemas/String'
        createdAt:
          $ref: '#/components/schemas/DateTime'
        updatedAt:
          $ref: '#/components/schemas/DateTime'
        createdBy:
          $ref: '#/components/schemas/String'
        updatedBy:
          $ref: '#/components/schemas/String'

    ExampleList:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Example'
        page:
          $ref: '#/components/schemas/Page'

  parameters:

    PageParam:
      in: query
      name: page
      schema:
        type: integer
        format: int32
        default: 1

    SizeParam:
      in: query
      name: size
      schema:
        type: integer
        format: int32
        default: 10

  responses:

    Created:
      description: Created

    Accepted:
      description: Accepted

    NoContent:
      description: No Content

    EmptyContent:
      description: No Content
      content:
        application/vnd.vroong.private.v1+json: { }

    BadRequest:
      description: Bad Request
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'

    Unauthorized:
      description: Unauthorized
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'

    Forbidden:
      description: Forbidden
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'

    NotFound:
      description: Not Found
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'

    Conflict:
      description: Conflict
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'

    ServerError:
      description: Internal Server Error
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'

  securitySchemes:
    'jhipster-uaa':
      type: oauth2
      flows:
        password:
          tokenUrl: http://localhost:9999/uaa/oauth/token
          refreshUrl: http://localhost:9999/uaa/oauth/token
          scopes: {}
        clientCredentials:
          tokenUrl: http://localhost:9999/uaa/oauth/token
          scopes: {}

security:
  - jhipster-uaa: []
